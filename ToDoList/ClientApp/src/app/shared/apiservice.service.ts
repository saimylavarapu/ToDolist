//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable()
export class TaskClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7027";
  }

  /**
   * @return Success
   */
  getAllTasks(): Observable<TaskDTO[]> {
    let url_ = this.baseUrl + "/api/Task/GetAllTasks";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllTasks(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllTasks(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TaskDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TaskDTO[]>;
    }));
  }

  protected processGetAllTasks(response: HttpResponseBase): Observable<TaskDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(TaskDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getByID(id: number | undefined): Observable<TaskByIDDTO[]> {
    let url_ = this.baseUrl + "/api/Task/GetByID?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetByID(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByID(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TaskByIDDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TaskByIDDTO[]>;
    }));
  }

  protected processGetByID(response: HttpResponseBase): Observable<TaskByIDDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(TaskByIDDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateTask(body: UpdateDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/Task/UpdateTask";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateTask(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateTask(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateTask(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  deleteTask(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/Task/DeleteTask?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteTask(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteTask(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteTask(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addIteam(body: AddTaskDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/Task/AddIteam";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddIteam(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddIteam(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAddIteam(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class UserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7027";
  }

  /**
   * @return Success
   */
  getAllUsers(): Observable<UserDTOALL[]> {
    let url_ = this.baseUrl + "/api/User/GetAllUsers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllUsers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllUsers(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserDTOALL[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserDTOALL[]>;
    }));
  }

  protected processGetAllUsers(response: HttpResponseBase): Observable<UserDTOALL[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserDTOALL.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getByID(id: number | undefined): Observable<GetByIDDTO[]> {
    let url_ = this.baseUrl + "/api/User/GetByID?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetByID(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetByID(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetByIDDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetByIDDTO[]>;
    }));
  }

  protected processGetByID(response: HttpResponseBase): Observable<GetByIDDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(GetByIDDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  updateUser(body: UpdateUerDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/User/UpdateUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  deleteUser(id: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/User/DeleteUser?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional) 
   * @return Success
   */
  addUserDTO(body: AddUserDTO | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/User/AddUserDTO";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAddUserDTO(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAddUserDTO(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAddUserDTO(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param id (optional) 
   * @return Success
   */
  getAllTaskByID(id: number | undefined): Observable<UserTaskDTO[]> {
    let url_ = this.baseUrl + "/api/User/GetAllTaskByID?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAllTaskByID(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAllTaskByID(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserTaskDTO[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserTaskDTO[]>;
    }));
  }

  protected processGetAllTaskByID(response: HttpResponseBase): Observable<UserTaskDTO[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserTaskDTO.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class WeatherForecastClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7027";
  }

  /**
   * @return Success
   */
  weatherForecast(): Observable<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processWeatherForecast(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processWeatherForecast(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<WeatherForecast[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
    }));
  }

  protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class AddTaskDTO implements IAddTaskDTO {
  taskName?: string | null;
  fkUserID?: number;

  constructor(data?: IAddTaskDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
      this.fkUserID = _data["fkUserID"] !== undefined ? _data["fkUserID"] : <any>null;
    }
  }

  static fromJS(data: any): AddTaskDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddTaskDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    data["fkUserID"] = this.fkUserID !== undefined ? this.fkUserID : <any>null;
    return data;
  }
}

export interface IAddTaskDTO {
  taskName?: string | null;
  fkUserID?: number;
}

export class AddUserDTO implements IAddUserDTO {
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;

  constructor(data?: IAddUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNo = _data["mobileNo"] !== undefined ? _data["mobileNo"] : <any>null;
      this.addresss = _data["addresss"] !== undefined ? _data["addresss"] : <any>null;
    }
  }

  static fromJS(data: any): AddUserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddUserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNo"] = this.mobileNo !== undefined ? this.mobileNo : <any>null;
    data["addresss"] = this.addresss !== undefined ? this.addresss : <any>null;
    return data;
  }
}

export interface IAddUserDTO {
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
}

export class GetByIDDTO implements IGetByIDDTO {
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;

  constructor(data?: IGetByIDDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNo = _data["mobileNo"] !== undefined ? _data["mobileNo"] : <any>null;
      this.addresss = _data["addresss"] !== undefined ? _data["addresss"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
    }
  }

  static fromJS(data: any): GetByIDDTO {
    data = typeof data === 'object' ? data : {};
    let result = new GetByIDDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNo"] = this.mobileNo !== undefined ? this.mobileNo : <any>null;
    data["addresss"] = this.addresss !== undefined ? this.addresss : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    return data;
  }
}

export interface IGetByIDDTO {
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
}

export class TaskByIDDTO implements ITaskByIDDTO {
  taskID?: number;
  taskName?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  fkUserID?: number;

  constructor(data?: ITaskByIDDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.taskID = _data["taskID"] !== undefined ? _data["taskID"] : <any>null;
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
      this.fkUserID = _data["fkUserID"] !== undefined ? _data["fkUserID"] : <any>null;
    }
  }

  static fromJS(data: any): TaskByIDDTO {
    data = typeof data === 'object' ? data : {};
    let result = new TaskByIDDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["taskID"] = this.taskID !== undefined ? this.taskID : <any>null;
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    data["fkUserID"] = this.fkUserID !== undefined ? this.fkUserID : <any>null;
    return data;
  }
}

export interface ITaskByIDDTO {
  taskID?: number;
  taskName?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  fkUserID?: number;
}

export class TaskDTO implements ITaskDTO {
  taskID?: number;
  taskName?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  fkUserID?: number;

  constructor(data?: ITaskDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.taskID = _data["taskID"] !== undefined ? _data["taskID"] : <any>null;
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
      this.fkUserID = _data["fkUserID"] !== undefined ? _data["fkUserID"] : <any>null;
    }
  }

  static fromJS(data: any): TaskDTO {
    data = typeof data === 'object' ? data : {};
    let result = new TaskDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["taskID"] = this.taskID !== undefined ? this.taskID : <any>null;
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    data["fkUserID"] = this.fkUserID !== undefined ? this.fkUserID : <any>null;
    return data;
  }
}

export interface ITaskDTO {
  taskID?: number;
  taskName?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  fkUserID?: number;
}

export class ToDoTask implements IToDoTask {
  taskID?: number;
  taskName!: string;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  users?: User;
  fkUserID?: number;

  constructor(data?: IToDoTask) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.taskID = _data["taskID"] !== undefined ? _data["taskID"] : <any>null;
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
      this.users = _data["users"] ? User.fromJS(_data["users"]) : <any>null;
      this.fkUserID = _data["fkUserID"] !== undefined ? _data["fkUserID"] : <any>null;
    }
  }

  static fromJS(data: any): ToDoTask {
    data = typeof data === 'object' ? data : {};
    let result = new ToDoTask();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["taskID"] = this.taskID !== undefined ? this.taskID : <any>null;
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    data["users"] = this.users ? this.users.toJSON() : <any>null;
    data["fkUserID"] = this.fkUserID !== undefined ? this.fkUserID : <any>null;
    return data;
  }
}

export interface IToDoTask {
  taskID?: number;
  taskName: string;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  users?: User;
  fkUserID?: number;
}

export class UpdateDTO implements IUpdateDTO {
  pkTaskID?: number;
  taskName?: string | null;
  fkUserID?: number;

  constructor(data?: IUpdateDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkTaskID = _data["pkTaskID"] !== undefined ? _data["pkTaskID"] : <any>null;
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
      this.fkUserID = _data["fkUserID"] !== undefined ? _data["fkUserID"] : <any>null;
    }
  }

  static fromJS(data: any): UpdateDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkTaskID"] = this.pkTaskID !== undefined ? this.pkTaskID : <any>null;
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    data["fkUserID"] = this.fkUserID !== undefined ? this.fkUserID : <any>null;
    return data;
  }
}

export interface IUpdateDTO {
  pkTaskID?: number;
  taskName?: string | null;
  fkUserID?: number;
}

export class UpdateUerDTO implements IUpdateUerDTO {
  userID?: number;
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;

  constructor(data?: IUpdateUerDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userID = _data["userID"] !== undefined ? _data["userID"] : <any>null;
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNo = _data["mobileNo"] !== undefined ? _data["mobileNo"] : <any>null;
      this.addresss = _data["addresss"] !== undefined ? _data["addresss"] : <any>null;
    }
  }

  static fromJS(data: any): UpdateUerDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateUerDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userID"] = this.userID !== undefined ? this.userID : <any>null;
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNo"] = this.mobileNo !== undefined ? this.mobileNo : <any>null;
    data["addresss"] = this.addresss !== undefined ? this.addresss : <any>null;
    return data;
  }
}

export interface IUpdateUerDTO {
  userID?: number;
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
}

export class User implements IUser {
  userID?: number;
  userName!: string;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  tasks?: ToDoTask[] | null;

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userID = _data["userID"] !== undefined ? _data["userID"] : <any>null;
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNo = _data["mobileNo"] !== undefined ? _data["mobileNo"] : <any>null;
      this.addresss = _data["addresss"] !== undefined ? _data["addresss"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
      if (Array.isArray(_data["tasks"])) {
        this.tasks = [] as any;
        for (let item of _data["tasks"])
          this.tasks!.push(ToDoTask.fromJS(item));
      }
      else {
        this.tasks = <any>null;
      }
    }
  }

  static fromJS(data: any): User {
    data = typeof data === 'object' ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userID"] = this.userID !== undefined ? this.userID : <any>null;
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNo"] = this.mobileNo !== undefined ? this.mobileNo : <any>null;
    data["addresss"] = this.addresss !== undefined ? this.addresss : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    if (Array.isArray(this.tasks)) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    return data;
  }
}

export interface IUser {
  userID?: number;
  userName: string;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  tasks?: ToDoTask[] | null;
}

export class UserDTOALL implements IUserDTOALL {
  userID?: number | null;
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  tasks?: ToDoTask[] | null;

  constructor(data?: IUserDTOALL) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userID = _data["userID"] !== undefined ? _data["userID"] : <any>null;
      this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
      this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
      this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
      this.mobileNo = _data["mobileNo"] !== undefined ? _data["mobileNo"] : <any>null;
      this.addresss = _data["addresss"] !== undefined ? _data["addresss"] : <any>null;
      this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
      this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
      this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
      if (Array.isArray(_data["tasks"])) {
        this.tasks = [] as any;
        for (let item of _data["tasks"])
          this.tasks!.push(ToDoTask.fromJS(item));
      }
      else {
        this.tasks = <any>null;
      }
    }
  }

  static fromJS(data: any): UserDTOALL {
    data = typeof data === 'object' ? data : {};
    let result = new UserDTOALL();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userID"] = this.userID !== undefined ? this.userID : <any>null;
    data["userName"] = this.userName !== undefined ? this.userName : <any>null;
    data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
    data["password"] = this.password !== undefined ? this.password : <any>null;
    data["mobileNo"] = this.mobileNo !== undefined ? this.mobileNo : <any>null;
    data["addresss"] = this.addresss !== undefined ? this.addresss : <any>null;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
    data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
    data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
    if (Array.isArray(this.tasks)) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDTOALL {
  userID?: number | null;
  userName?: string | null;
  emailAddress?: string | null;
  password?: string | null;
  mobileNo?: number | null;
  addresss?: string | null;
  createdDate?: Date;
  isActive?: boolean;
  isDelete?: boolean;
  tasks?: ToDoTask[] | null;
}

export class UserTaskDTO implements IUserTaskDTO {
  pkTaskID?: number;
  taskName?: string | null;

  constructor(data?: IUserTaskDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pkTaskID = _data["pkTaskID"] !== undefined ? _data["pkTaskID"] : <any>null;
      this.taskName = _data["taskName"] !== undefined ? _data["taskName"] : <any>null;
    }
  }

  static fromJS(data: any): UserTaskDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UserTaskDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["pkTaskID"] = this.pkTaskID !== undefined ? this.pkTaskID : <any>null;
    data["taskName"] = this.taskName !== undefined ? this.taskName : <any>null;
    return data;
  }
}

export interface IUserTaskDTO {
  pkTaskID?: number;
  taskName?: string | null;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | null;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
      this.temperatureC = _data["temperatureC"] !== undefined ? _data["temperatureC"] : <any>null;
      (<any>this).temperatureF = _data["temperatureF"] !== undefined ? _data["temperatureF"] : <any>null;
      this.summary = _data["summary"] !== undefined ? _data["summary"] : <any>null;
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === 'object' ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>null;
    data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : <any>null;
    data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : <any>null;
    data["summary"] = this.summary !== undefined ? this.summary : <any>null;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | null;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
